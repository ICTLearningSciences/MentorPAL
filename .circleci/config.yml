version: 2.1
executors:
  ebs:
    docker:
      - image: larrykirschner/circleci-elasticbeanstalk:1.1.0
  node:
    docker:
      - image: circleci/node:12.4
  python:
    docker:
      - image: circleci/python:3.6.9
  tests-dockerized:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
aliases:
  # setup env vars for ebs tools
  - &dev-mentorpal-env-init
    name: dev-mentorpal env init
    command: eval $EBS_TOOLS_ENV_INIT && echo 'export EB_ENV=dev-mentorpal' >> $BASH_ENV
  - &qa-mentorpal-env-init
    name: qa-mentorpal env init
    command: eval $EBS_TOOLS_ENV_INIT && echo 'export EB_ENV=qa-mentorpal' >> $BASH_ENV
  - &prod-mentorpal-env-init
    name: qa-mentorpal env init
    command: eval $EBS_TOOLS_ENV_INIT && echo 'export EB_ENV=prod-mentorpal' >> $BASH_ENV
  - &eb-deploy
    name: EBS Deploy
    # TODO: now hardcoded with arch 'lstm_v1' and --newest. 
    # This should be made configurable but in a way that is minimally burdonsome/error prone
    command: |
      cd ${EBS_TOOLS} \
        && make clean build \
        && mkdir -p build/ebs/bundle/mentor-api/checkpoint \
        && pip install --user -e git+https://github.com/ICTLearningSciences/mentor-classifier.git@1.0.0#egg=mentor_classifier \
        && mentor_classifier_copy_models \
          --newest \
          --arch lstm_v1 \
          --from ~/project/checkpoint/classifiers \
          --to build/ebs/bundle/mentor-api/checkpoint/classifiers \
        && cp -r ~/project/checkpoint/vector_models build/ebs/bundle/mentor-api/checkpoint/vector_models \
        && cp -r ~/project/mentors/data/mentors build/ebs/bundle/mentor-api/mentors \
        && make eb-deploy
  - &only-main
    branches:
      only:
        - main
  - &only-prod-releases
    tags:
      only: /v[0-9]+(\.[0-9]+)*(-prod)/
    branches:
      ignore: /.*/
  - &git-lfs-install
    run:
      name: Git lfs install
      command: |
        curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash \
          && sudo apt-get install -y git-lfs \
          && git lfs install
  - &git-lfs-pull
    run:
      name: Git lfs pull
      command: git lfs pull
  - &checkout-revision-restore
    restore_cache:
      keys:
        - source-v1-{{ .Branch }}-{{ .Revision }}
        - source-v1-{{ .Branch }}-
        - source-v1-
  - &checkout-revision-save
    save_cache:
      key: source-v1-{{ .Branch }}-{{ .Revision }}
      paths:
        - ".git"
jobs:
  checkout-revision-setup:
    executor: python
    steps:
      - *checkout-revision-restore
      - *git-lfs-install
      - checkout
      - *git-lfs-pull
      - *checkout-revision-save
  dev-ebs-deploy:
    executor: ebs
    steps:
      - *git-lfs-install
      - checkout
      - *git-lfs-pull
      - run: *dev-mentorpal-env-init
      - run: *eb-deploy
  qa-ebs-deploy:
    executor: ebs
    steps:
      - *git-lfs-install
      - checkout
      - *git-lfs-pull
      - run: *qa-mentorpal-env-init
      - run: *eb-deploy
  prod-ebs-deploy:
    executor: ebs
    steps:
      - *git-lfs-install
      - checkout
      - *git-lfs-pull
      - run: *prod-mentorpal-env-init
      - run: *eb-deploy
  test:
    executor: tests-dockerized
    steps:
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - *git-lfs-install
      - checkout
      - run: git submodule init && git submodule update --remote
      - *git-lfs-pull
      - run: make test
  test-license:
    executor: node
    steps:
      - checkout
      - run:
          name: License js
          command: npm ci && npm run test:license
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - checkout-revision-setup
      - test-license
      - test:
          requires:
            - checkout-revision-setup
            - test-license
      - approve-dev-deploy:
          type: approval
          requires:
            - test
      - dev-ebs-deploy:
          requires:
            - approve-dev-deploy
      - qa-ebs-deploy:
          filters: *only-main
  build-test-deploy-prod:
    jobs:
      - prod-ebs-deploy:
          filters: *only-prod-releases
